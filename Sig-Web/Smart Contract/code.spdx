// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract BasicToken {
    // Track the balances of each address
    mapping(address => uint256) public balances;

    // Track total supply of tokens
    uint256 public totalSupply;

    // Event for transfer logging
    event Transfer(address indexed from, address indexed to, uint256 value);

    // Event for minting new tokens
    event Mint(address indexed to, uint256 value);

    // Function to check balance of an address
    function balanceOf(address account) public view returns (uint256) {
        return balances[account];
    }

    // Function to mint new tokens (only the contract deployer can mint)
    function mint(address account, uint256 amount) public {
        require(account != address(0), "Mint to the zero address");

        totalSupply += amount;         // Increase total supply
        balances[account] += amount;   // Increase balance of recipient

        emit Mint(account, amount);    // Emit minting event
    }

    // Function to transfer tokens to another address
    function transfer(address recipient, uint256 amount) public returns (bool) {
        require(recipient != address(0), "Transfer to the zero address");
        require(balances[msg.sender] >= amount, "Insufficient balance");

        balances[msg.sender] -= amount;  // Decrease sender's balance
        balances[recipient] += amount;   // Increase recipient's balance

        emit Transfer(msg.sender, recipient, amount);  // Emit transfer event
        return true;
    }
}
